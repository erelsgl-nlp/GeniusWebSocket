package misc;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import negotiator.AgentID;
import negotiator.Bid;
import negotiator.actions.*;
import negotiator.events.NegotiationEndedEvent.AgreementType;
import negotiator.issue.ValueDiscrete;
import negotiator.issue.ValueInteger;
import negotiator.issue.ValueReal;
import negotiator.logging.*;

/**
 * This class creates csv files from a directory of logs generated by the Genius
 * platform
 * 
 * @author Yael Blumberg
 * 
 */
public class LogAnalyzer {

	private PrintWriter sumOut;
	private PrintWriter detailedOut;

	private final String SUM_HEADLINES = "file,user,sideA,sideB,start,end,length (s),rounds no,"
			+ "utilA,utilB,sum,diff,agreement type,mediator,med offers, A offers, B offers";
	private final String DETAILED_HEADLINES = "file,round,time,type,sender,desc,utilA,utilB";

	private ArrayList<NegotiationLog> negLogs = new ArrayList<NegotiationLog>();
	private ArrayList<String> negLogsFile = new ArrayList<String>();

	/**
	 * @param args
	 *            - get's the directory name and a prefix for a log file
	 */
	public static void main(String[] args) {

		String logPrefix = "outcomes";

		// Checking if the arguments were entered
		if (args.length == 0) {
			System.out
					.println("Please enter log's directory, and log name prefix if different then: "
							+ logPrefix);
		} else {

			LogAnalyzer a = new LogAnalyzer();

			String dir = args[0];

			if (args.length > 1) {
				logPrefix = args[1];
			}

			// Getting all the files in the directory
			File dirF = new File(dir);
			File[] logs = dirF.listFiles();

			// Reading each log file
			for (int i = 0; i < logs.length; ++i) {

				// Checking that this is a log file
				if ((logs[i].isFile())
						&& (logs[i].getName().contains(logPrefix))) {

					a.readFile(logs[i]);
				}
			}

			// Analyzing the data
			a.analyze(dir);
		}
	}

	/**
	 * Getting the negotiatonLog object from the file and adding to the list
	 * 
	 * @param curLog
	 */
	void readFile(File curLog) {

		JAXBContext context;

		try {
			// Transforming the xml file back to a negotiationLog object
			context = JAXBContext.newInstance(SessionLog.class, Action.class,
					BidAction.class, Offer.class, Query.class, Promise.class,
					CounterOffer.class, Accept.class, Reject.class,
					Comment.class, Threat.class, EndTurn.class,
					EndNegotiation.class, IllegalAction.class,
					OfferUpgrade.class, UltimatumThreat.class, Ultimatum.class, UpdateStatusAction.class, Bid.class,
					AgreementReached.class, ValidateAgreement.class,
					AgentID.class, ValueDiscrete.class, ValueReal.class,
					ValueInteger.class, NegotiationLog.class, SessionLog.class,
					RoundLog.class, ActionLog.class, ResultLog.class,
					TournamentLog.class);

			Unmarshaller marshaller = context.createUnmarshaller();
			Object obj = marshaller.unmarshal(curLog);
			
			if (obj instanceof NegotiationLog) {
				negLogs.add((NegotiationLog) obj);
				negLogsFile.add(curLog.getName());
			}
			else if (obj instanceof TournamentLog) {
				negLogs.addAll(((TournamentLog)obj).getNegotiation());
				int countNeg = ((TournamentLog)obj).getNumberOfNegotiations();
				for (int i = 0; i < countNeg; ++i) {
					negLogsFile.add(curLog.getName());
				}
					
			}
			else {
				System.out.println("error in file: " + curLog.getName());
				System.out.println("unrecognized root element.");
			}

		} catch (JAXBException e) {
			System.out.println("error in file: " + curLog.getName());
			e.printStackTrace();
		}
	}

	void analyze(String directory) {
		try {

			// Creating the results files
			sumOut = new PrintWriter(directory + "\\results.csv");
			sumOut.println(SUM_HEADLINES);
			detailedOut = new PrintWriter(directory + "\\detailedResults.csv");
			detailedOut.println(DETAILED_HEADLINES);

			for (int curLog = 0; curLog < negLogs.size(); ++curLog) {

				try {
					NegotiationLog negLog = negLogs.get(curLog);

					// Getting the starting and ending time
					int lastSession = negLog.getSessions().size() - 1;
					Date start = negLog.getSessions().get(0).getStart();
					Date end = negLog.getSessions().get(lastSession).getEnd();
					long gameLength = (end.getTime() - start.getTime()) / 1000;

					// Getting the number of rounds
					int roundsNo = negLog.getSession(0).getRounds().size();


					// Getting the agents ids
					AgentID sideA = negLog.getAgent(0).getAgentID();
					AgentID sideB = negLog.getAgent(1).getAgentID();
					AgentID med = null;
					String medClass = "";

					// Checking if a meidator exists
					if (negLog.getAgents().size() > 2) {
						med = negLog.getAgent(2).getAgentID();
						medClass = negLog.getAgent(2).getAgentClass();

						// Removing the "mediator."
						medClass = medClass
								.substring(medClass.indexOf(".") + 1);
					}

					// Getting the participants Id's
					String IdA = negLog.getAgent(0).getmUserId();
					if (IdA == null)
						IdA = sideA.toString();
					
					if (IdA.startsWith("Side"))
						IdA = IdA.substring(6);
					
					String IdB = negLog.getAgent(1).getmUserId();
					if (IdB == null)
						IdB = sideB.toString();
					
					if (IdB.startsWith("Side"))
						IdB = IdB.substring(6);
						
					// Getting the user name (the user name is the same for both
					// players only with 1 or 2 concatenated to the end)
					String userName = sideA.toString().substring(0,
							sideA.toString().length() - 1);

					// Getting the players utilities
					Double utilA = negLog.getSession(0).getResults()
							.getUtilities().get(sideA.toString());
					Double utilB = negLog.getSession(0).getResults()
							.getUtilities().get(sideB.toString());

					AgreementType agType = negLog.getSession(0).getResults()
							.getAgreementType();

					int medOffers = 0;
					int AOffers = 0;
					int BOffers = 0;

					// Going through all of the actions
					for (SessionLog s : negLog.getSessions()) {
						for (RoundLog r : s.getRounds()) {
							for (ActionLog a : r.getActions()) {

								// Getting the actions type
								String type = a.getAction().getClass()
										.getName();
								type = type
										.substring(type.lastIndexOf(".") + 1);

								String currUtilA = "";
								String currUtilB = "";

								// Checking if this is an action with utilities
								if (!a.getUtilities().isEmpty()) {
									currUtilA = a.getUtilities().get(
											sideA.toString()).toString();
									currUtilB = a.getUtilities().get(
											sideB.toString()).toString();
								}

								// Getting the actions sender
								String source = "";

								if (a.getSource() != null) {
									source = a.getSource().toString();
								}

								// Getting the actions description and making
								// sure it doesn't include any commas (will
								// destroy the csv structure)
								String desc = a.getAction().toString();
								desc = desc.replace(",", ";");

								// Wrinting the current offer to the file
								detailedOut.println(negLogsFile.get(curLog) + ","
										+ r.getRoundIndex() + ","
										+ a.getTimestamp().toString() + ","
										+ type + "," + source + "," + desc
										+ "," + currUtilA + "," + currUtilB);

								// Counting the players and mediators offers
								if (a.getAction() instanceof Offer) {
									AgentID sender = a.getSource();

									// Checking who was the sender
									if ((med != null) && (sender.equals(med))) {
										medOffers++;
									} else if (sender.equals(sideA)) {
										AOffers++;
									} else if (sender.equals(sideB)) {
										BOffers++;
									}
								}
							}
						}
					}

					// Wrinting the current negotiation to the file
					sumOut.println(negLogsFile.get(curLog) + "," + userName + ","
							+ IdA + "," + IdB + "," + start.toString() + ","
							+ end.toString() + "," + gameLength + ","
							+ roundsNo + "," + utilA + "," + utilB + ","
							+ new Double (utilA + utilB) + "," 
							+ new Double (Math.abs(utilA - utilB)) + ","
							+ agType.toString() + "," + medClass + ","
							+ medOffers + "," + AOffers + "," + BOffers);

				} catch (Exception e) {
					System.out.println("Problem at file: "
							+ negLogsFile.get(curLog));
					e.printStackTrace();
				}

			}

			sumOut.close();
			detailedOut.close();
			System.out.println("Analysis ended successfully!");

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
}